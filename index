<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Pemantauan Kualitas Air Dan Klasifikasi Ikan</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary-blue: #0284c7;
      --primary-green: #059669;
      --accent-orange: #ea580c;
      --bg-gradient-start: #f0f9ff;
      --bg-gradient-end: #ecfdf5;
      --text-primary: #1f2937;
      --text-secondary: #6b7280;
      --white: #ffffff;
      --shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
      --shadow-lg: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      background: linear-gradient(135deg, var(--bg-gradient-start) 0%, var(--bg-gradient-end) 100%);
      min-height: 100vh;
      color: var(--text-primary);
      line-height: 1.6;
    }

    .header {
      background: linear-gradient(135deg, var(--primary-green) 0%, var(--primary-blue) 100%);
      color: var(--white);
      padding: 1.5rem 0;
      box-shadow: var(--shadow);
      position: relative;
      overflow: hidden;
    }

    .header::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grid" width="10" height="10" patternUnits="userSpaceOnUse"><path d="M 10 0 L 0 0 0 10" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></pattern></defs><rect width="100" height="100" fill="url(%23grid)"/></svg>');
      opacity: 0.3;
    }

    .header-content {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 2rem;
      display: flex;
      align-items: center;
      gap: 1rem;
      position: relative;
      z-index: 1;
    }

    .header-icon {
      width: 2.5rem;
      height: 2.5rem;
      background: rgba(255, 255, 255, 0.2);
      border-radius: 0.75rem;
      display: flex;
      align-items: center;
      justify-content: center;
      backdrop-filter: blur(10px);
    }

    .header-title {
      font-size: 1.75rem;
      font-weight: 700;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .main-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem;
    }

    .dashboard-card {
      background: var(--white);
      border-radius: 1.5rem;
      box-shadow: var(--shadow-lg);
      overflow: hidden;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .last-updated {
      text-align: center;
      padding: 1.5rem 2rem;
      background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
      border-bottom: 1px solid #e2e8f0;
    }

    .last-updated-text {
      color: var(--text-secondary);
      font-size: 0.875rem;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
    }

    .parameters-section {
      padding: 2rem;
    }

    .parameters-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 1.5rem;
      margin-bottom: 2rem;
    }

    .parameter-card {
      background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
      border-radius: 1rem;
      padding: 1.5rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      border: 1px solid rgba(0, 0, 0, 0.05);
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      overflow: hidden;
    }

    .parameter-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 4px;
      background: var(--card-color);
      transform: scaleX(0);
      transition: transform 0.3s ease;
    }

    .parameter-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }

    .parameter-card:hover::before {
      transform: scaleX(1);
    }

    .temperature {
      --card-color: #0ea5e9;
    }

    .temperature .parameter-header {
      color: #0ea5e9;
    }

    .do {
      --card-color: #10b981;
    }

    .do .parameter-header {
      color: #10b981;
    }

    .ph {
      --card-color: #8b5cf6;
    }

    .ph .parameter-header {
      color: #8b5cf6;
    }

    .parameter-header {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      margin-bottom: 1rem;
    }

    .parameter-icon {
      width: 2rem;
      height: 2rem;
      padding: 0.5rem;
      background: currentColor;
      border-radius: 0.5rem;
      color: var(--white);
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .parameter-title {
      font-weight: 600;
      font-size: 1rem;
      color: var(--text-primary);
    }

    .parameter-value {
      font-size: 2.5rem;
      font-weight: 800;
      color: var(--text-primary);
      margin-bottom: 0.25rem;
      font-variant-numeric: tabular-nums;
    }

    .parameter-unit {
      font-size: 1rem;
      color: var(--text-secondary);
      font-weight: 500;
    }

    .fish-prediction {
      background: linear-gradient(135deg, #ecfdf5 0%, #f0f9ff 100%);
      border-radius: 1rem;
      padding: 2rem;
      text-align: center;
      border: 2px solid rgba(16, 185, 129, 0.1);
      position: relative;
      overflow: hidden;
    }

    .fish-prediction::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle, rgba(16, 185, 129, 0.05) 0%, transparent 70%);
      animation: pulse 4s ease-in-out infinite;
    }

    .fish-header {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.75rem;
      margin-bottom: 1rem;
      position: relative;
      z-index: 1;
    }

    .fish-icon {
      width: 2rem;
      height: 2rem;
      color: var(--primary-green);
    }

    .fish-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-primary);
    }

    .fish-type {
      font-size: 2rem;
      font-weight: 800;
      color: var(--primary-green);
      position: relative;
      z-index: 1;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .loading-container {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding: 4rem 2rem;
      text-align: center;
    }

    .spinner {
      width: 3rem;
      height: 3rem;
      border: 4px solid #e5e7eb;
      border-top-color: var(--primary-blue);
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 1rem;
    }

    .loading-text {
      color: var(--text-secondary);
      font-weight: 500;
    }

    .error-container {
      background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%);
      color: #dc2626;
      padding: 2rem;
      border-radius: 1rem;
      text-align: center;
      border: 1px solid #fecaca;
      margin: 2rem;
    }

    .error-icon {
      width: 3rem;
      height: 3rem;
      margin: 0 auto 1rem;
      color: #dc2626;
    }

    .footer {
      background: linear-gradient(135deg, #1f2937 0%, #111827 100%);
      color: #e5e7eb;
      text-align: center;
      padding: 1rem;
      position: fixed;
      bottom: 0;
      width: 100%;
      font-size: 0.875rem;
      box-shadow: 0 -4px 6px -1px rgba(0, 0, 0, 0.1);
      backdrop-filter: blur(10px);
    }

    @keyframes spin {
      to { transform: rotate(360deg); }
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    @media (max-width: 768px) {
      .header-title {
        font-size: 1.25rem;
      }

      .main-container {
        padding: 1rem;
      }

      .parameters-section {
        padding: 1rem;
      }

      .parameter-card {
        padding: 1rem;
      }

      .parameter-value {
        font-size: 2rem;
      }

      .fish-type {
        font-size: 1.5rem;
      }

      .parameters-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
      }

      body {
        padding-bottom: 4rem;
      }
    }
  </style>
</head>
<body>
  <header class="header">
    <div class="header-content">
      <div class="header-icon">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M6.5 12c.94-3.46 4.94-6 8.5-6s7.56 2.54 8.5 6c-.94 3.46-4.94 6-8.5 6s-7.56-2.54-8.5-6"/>
          <path d="M18 15.28c.2-.4.5-.8.9-1.28"/>
          <path d="M6 15.28c-.2-.4-.5-.8-.9-1.28"/>
          <path d="M12 9v6"/>
          <path d="M12 12h.01"/>
        </svg>
      </div>
      <h1 class="header-title">Pemantauan Kualitas Air & Klasifikasi Ikan</h1>
    </div>
  </header>

  <main class="main-container">
    <div id="dashboard" class="dashboard-card">
      <div class="loading-container">
        <div class="spinner"></div>
        <p class="loading-text">Memuat data sensor...</p>
      </div>
    </div>
  </main>

  <footer class="footer">
    <p>üêü Data diperbarui setiap 5 detik ‚Ä¢ Sistem Monitoring Budidaya Ikan</p>
  </footer>

  <script>
    function updateDashboard(data) {
      const dashboard = document.getElementById('dashboard');
      const timestamp = new Date(data.waktu).toLocaleString('id-ID', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });
      
      dashboard.innerHTML = `
        <div class="last-updated">
          <div class="last-updated-text">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="12" cy="12" r="10"/>
              <polyline points="12,6 12,12 16,14"/>
            </svg>
            Terakhir diperbarui: ${timestamp}
          </div>
        </div>
        
        <div class="parameters-section">
          <div class="parameters-grid">
            <div class="parameter-card temperature">
              <div class="parameter-header">
                <div class="parameter-icon">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M14 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z"/>
                  </svg>
                </div>
                <h3 class="parameter-title">Suhu Air</h3>
              </div>
              <div class="parameter-value">${data.suhu}</div>
              <div class="parameter-unit">¬∞C</div>
            </div>

            <div class="parameter-card do">
              <div class="parameter-header">
                <div class="parameter-icon">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M12 22a8 8 0 0 0 8-8c0-4.52-3.83-9.3-8-12.28C7.83 4.7 4 9.48 4 14a8 8 0 0 0 8 8Z"/>
                  </svg>
                </div>
                <h3 class="parameter-title">Kadar Oksigen (DO)</h3>
              </div>
              <div class="parameter-value">${data.do}</div>
              <div class="parameter-unit">mg/L</div>
            </div>

            <div class="parameter-card ph">
              <div class="parameter-header">
                <div class="parameter-icon">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M22 12h-4l-3 9L9 3l-3 9H2"/>
                  </svg>
                </div>
                <h3 class="parameter-title">pH Air</h3>
              </div>
              <div class="parameter-value">${data.ph}</div>
              <div class="parameter-unit">pH</div>
            </div>
          </div>

          <div class="fish-prediction">
            <div class="fish-header">
              <svg class="fish-icon" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M6.5 12c.94-3.46 4.94-6 8.5-6s7.56 2.54 8.5 6c-.94 3.46-4.94 6-8.5 6s-7.56-2.54-8.5-6"/>
                <path d="M18 15.28c.2-.4.5-.8.9-1.28"/>
                <path d="M6 15.28c-.2-.4-.5-.8-.9-1.28"/>
                <path d="M12 9v6"/>
                <path d="M12 12h.01"/>
              </svg>
              <h3 class="fish-title">Jenis Ikan yang Cocok</h3>
            </div>
              <p class="fish-type">${
                Array.isArray(data.prediksi) && data.prediksi.length > 0
                  ? data.prediksi.join(", ")
                  : "Tidak ada ikan yang cocok"
              }</p>
          </div>
        </div>
      `;
    }

    function showError(message) {
      const dashboard = document.getElementById('dashboard');
      dashboard.innerHTML = `
        <div class="error-container">
          <svg class="error-icon" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="10"/>
            <line x1="15" y1="9" x2="9" y2="15"/>
            <line x1="9" y1="9" x2="15" y2="15"/>
          </svg>
          <h3 style="margin-bottom: 0.5rem; font-weight: 600;">Terjadi Kesalahan</h3>
          <p>${message}</p>
          <button onclick="fetchData()" style="margin-top: 1rem; padding: 0.5rem 1rem; background: #dc2626; color: white; border: none; border-radius: 0.5rem; cursor: pointer; font-weight: 500;">
            Coba Lagi
          </button>
        </div>
      `;
    }

    async function fetchData() {
      try {
        const response = await fetch('https://klasifikasi-ikan-api.onrender.com/last-prediction');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        
        // Validate data structure
        if (!data || typeof data.suhu === 'undefined' || typeof data.do === 'undefined' || typeof data.ph === 'undefined') {
          throw new Error('Data tidak lengkap dari server');
        }
        
        updateDashboard(data);
      } catch (error) {
        console.error('Error fetching data:', error);
        showError('Gagal memuat data dari server. Periksa koneksi internet Anda.');
      }
    }

    // Initial fetch
    fetchData();

    // Update every 5 seconds
    setInterval(fetchData, 5000);

    // Add some interactive effects
    document.addEventListener('DOMContentLoaded', function() {
      // Add click effect to parameter cards
      document.addEventListener('click', function(e) {
        if (e.target.closest('.parameter-card')) {
          const card = e.target.closest('.parameter-card');
          card.style.transform = 'scale(0.98)';
          setTimeout(() => {
            card.style.transform = '';
          }, 150);
        }
      });
    });
  </script>
</body>
</html>
